package ionix.Data.SqlServer;

import ionix.Data.*;
import ionix.Utils.*;

import java.util.*;


public class EntitySqlQueryBuilderInsert implements EntitySqlQueryBuilder {
    private HashSet<String> insertFields;
    public void setInsertFields(HashSet<String> insertFields){
        this.insertFields = insertFields;
    }

    @Override
    public Triplet<SqlQuery, AutoGeneratedKey, FieldMetaData> createQuery(Object entity, EntityMetaData metaData) {
        if (null == entity)
            throw new IllegalArgumentException("entity is null");

        boolean insertFieldsEnabled = !Ext.isEmptyList(this.insertFields);

        SqlQuery query = new SqlQuery();
        StringBuilder text =  query.getText();
        text.append("INSERT INTO ")
                .append(metaData.getTableName())
                .append(" (");

        FieldMetaData identity = null;
        ArrayList<FieldMetaData> validFields = new ArrayList<>();
        for(FieldMetaData field : metaData.getFields()){
            SchemaInfo schema = field.getSchema();

            switch(schema.getDatabaseGeneratedOption()){
                case Identity:
                    if (null != identity)
                        throw new MultipleIdentityColumnFoundException(entity);
                    identity = field;
                    break;
                case Computed:
                    break;
                default:
                    if (insertFieldsEnabled && !insertFields.contains(schema.getColumnName()))
                        continue;
                    text.append(schema.getColumnName())
                            .append(',');

                    validFields.add(field);
                    break;
            }
        }

        text.delete(text.length() - 1, text.length());
        text.append(") VALUES (");

        for(FieldMetaData field : validFields){
            SqlQueryHelper.setColumnValue(DbValueSetter.Instance, query, field, entity);
            text.append(',');
        }
        text.delete(text.length() - 1, text.length());
        text.append(')');

        return new Triplet<>(query, identity != null ? AutoGeneratedKey.RETURN_GENERATED_KEYS : AutoGeneratedKey.NO_GENERATED_KEYS
        , identity);
    }
}
