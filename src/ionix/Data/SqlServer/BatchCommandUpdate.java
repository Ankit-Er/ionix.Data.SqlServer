package ionix.Data.SqlServer;

import ionix.Data.*;
import ionix.Utils.Ext;
import ionix.Utils.Triplet;

import java.util.*;

public class BatchCommandUpdate<TEntity> extends BatchCommandExecute<TEntity> implements ionix.Data.BatchCommandUpdate<TEntity> {

    protected BatchCommandUpdate(Class<TEntity> entityClass, TransactionalDbAccess dataAccess){
        super(entityClass, dataAccess);
    }

    @Override
    public int[] execute(Iterable<TEntity> entityList, EntityMetaDataProvider provider) {
        if (Ext.isEmptyList(entityList))
            return  null;

        List<TEntity> list = Ext.toList(entityList);

        final EntityMetaData metaData = provider.createEntityMetaData(this.getEntityClass());
        EntitySqlQueryBuilderUpdate builder = new EntitySqlQueryBuilderUpdate();
        builder.setUpdatedFields(this.updatedFields);
        Triplet<SqlQuery, AutoGeneratedKey, FieldMetaData> result = builder.createQuery(list.get(0), metaData);
        SqlQuery templateQuery = SqlQuery.toQuery(result.Item1.getText().toString());

        for(TEntity entity : entityList){
            result = builder.createQuery(entity, provider.createEntityMetaData(this.getEntityClass()));
            for(SqlQueryParameter par : result.Item1.getParameters()){
                templateQuery.parameter(par.getValue());
            }
        }


        return this.getDataAccess().executeBatch(templateQuery, metaData);
    }

    private HashSet<String> updatedFields;
    @Override
    public void setUpdatedFields(HashSet<String> updatedFields) {
        this.updatedFields = updatedFields;
    }


    @Override
    public int[] update(Iterable<TEntity> entityList, EntityMetaDataProvider provider) {
        return this.execute(entityList, provider);
    }
}
